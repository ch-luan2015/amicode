//Khai bao
// Khai bao list co phieu dang giu
Myasset = ParamStr( "My Asset", "EIB,24.7,22.3,24.8|VCG,27.9,26.3,27.5|KDH,36.4,35.05" );
MyWL = ParamStr( "My Watchlist", "STB|BCG|VCG|SSI" );

hhvv = HighestVisibleValue( V );
minv = -hhvv / 50;
upday = C > Ref( C, -1 );

///////////////////////////////////////////////////
//Draw line entry-stoploss-target on chart
asset_count = StrCount( Myasset, "|" ) + 1;
wl_count = StrCount( Mywl, "|" ) + 1;

for( i = 0; i < asset_count ; i++ )
{

    list = StrExtract( Myasset, i, '|' );

    symbol = StrExtract( list, 0, ',' ) ;
    Giamua = StrExtract( list, 1, ',' ) ;
    Stoploss = StrExtract( list, 2, ',' ) ;
    Target = StrExtract( list, 3, ',' ) ;

    SetForeign( symbol );
    fc = LastValue( close );
    rfc = ROC( fc, 1 );
    RestorePriceArrays();
    PnL = ( fc - StrToNum( giamua ) ) / StrToNum( giamua ) * 100;

    if( Name() == symbol )
    {

        line_sl = LineArray( BarCount - 13, StrToNum( Stoploss ), BarCount, StrToNum( Stoploss ), 1 );

        TargetNum = IIf( StrToNum( Target ) != 0, StrToNum( Target ), fc );

        line_target = LineArray( BarCount - 13, TargetNum, BarCount, TargetNum, 1 );

        line_entry = LineArray( BarCount - 13, StrToNum( giamua ), BarCount, StrToNum( giamua ), 1 );

        Plot( line_entry, "Entry", colorBlue, styleThick + styleDashed, Null, Null, 5 );
        Plot( line_sl, "Stoploss", colorRed, styleThick + styleDashed, Null, Null, 5 );
        Plot( line_target, "Target", colorgreen, styleThick + styleDashed, Null, Null, 5 );
    }

}


///////////////////////////////////////////////////
global IDset;

if( typeof( IDset ) == "undefined" ) IDset = 0;

//Bo Formatted text output sample via low-level gfxfunctions

CellHeight = Param( "Cell Height", 22, 0, 100, 1 );
CellWidth = Param( "Cell Width", 79, 0, 200, 1 );
start_x = Param( "Vi tri Table X", 0, 0, 2000, 1 );
start_y = Param( "Vi tri Table Y", 32, 0, 500, 1 );
BtnOffsetXY = 1;
x1 = start_x;
y1 = start_y;
y2 = y1 + CellHeight;
x2 = x1 + CellWidth;
col = Param( "col", 5, 1, 10, 1 );

function PointInside( x0, y0, x, y, width, height )
{
    global _x0, _y0;
    x = x + _x0;
    y = y + _y0;
    x0 = x0 + _x0;
    y0 = y0 + _y0;
    return ( ( x0 >= x ) && ( y0 >= y ) && ( x0 <= ( x + width ) ) && ( y0 <= ( y + height ) ) );
}
_cursorMouseButtons = GetCursorMouseButtons();
DT_CENTER = 1;
DT_VCENTER = 4 | 32;

function LeftClickInside( x, y, width, height )
{
    global _cursorMouseButtons, _x0, _y0;
    local px, py, res;

    // x = x+_x0; y = y+_y0;
    res = False;

    if( _cursorMouseButtons & 8 )  // click
    {
        px = GetCursorXPosition( 1 );
        py = GetCursorYPosition( 1 );
        res = PointInside( px, py, x, y, width, height );
    }

    return res;
}

global IDset;

if( typeof( IDset ) == "undefined" ) IDset = 0;

//GuiButton
function GuiButtonTrigger( ButtonName, x, y, width, height )
{

    GuiButton( ButtonName, ++IDset, x, y, width, height, 1 );

    id = GuiGetEvent( 0, 0 );
    event = GuiGetEvent( 0, 1 );
    clickevent = event == 1;
    ButtonClicked = id == IDset && clickevent;

    return ButtonClicked;
}
click = GetCursorMouseButtons() == 9;
Px = GetCursorXPosition( 1 );
Py = GetCursorYPosition( 1 );

GfxSetBkMode( 1 );

// Bo thuc thi procedure
procedure GfxLabel( text, x, y, width, height, format )
{
    GfxSelectFont( "Arial", CellHeight / 3.2, 600 );
    GfxSetTextColor( colorYellow );
    GfxDrawText( text, x, y, x + width, y + height, format | DT_VCENTER );
}

procedure SetOrigin( x0, y0 )
{
    global _x0, _y0;
    _x0 = x0;
    _y0 = y0;
}
procedure GfxSetColors( fgColor, bgColor )
{
    GfxSetTextColor( fgColor );
    GfxSetBkColor( bgColor );
    GfxSelectPen( fgColor );
    GfxSelectSolidBrush( bgColor );
}

function GfxGetState( id )
{
    return Nz( StaticVarGet( "GfxState" + id + GetChartID() ), 0 );
}
procedure GfxSetState( id, val )
{
    StaticVarSet( "GfxState" + id + GetChartID(), val );
}

//Tao Tab
function GfxHTabs( id, headers, headheight, x, y, width, height, colorfg, colorbg )
{
    local px, choice, na, i, G, header, w, wi, prevwi;

    choice = GfxGetState( id );
    GfxSetColors( colorfg, colorbg );

    for( G = 0; ( header = StrExtract( headers, G ) ) != ""; ++G ) {};

    w = width / G;

    wi = x;

    prevwi = x;

    if( LeftClickInside( x, y, width, headheight ) )
    {
        px = GetCursorXPosition( 1 );

        // choice = floor((px - x)/w);
        // wi = x; prevwi = x;
        for( i = 0; ( header = StrExtract( headers, i ) ) != ""; ++i )
        {
            wi = wi + ( width + 5 ) / ( StrCount( headers, "," ) + 1 );

            if( ( px > prevwi ) && ( px < wi ) )
            {
                choice = i;
                break;
            }
        }

        GfxSetState( id, choice ); // StaticVarSet(na, choice);
    }

    GfxSetBkMode( 1 );
    // Draw Zone & Tabs
    wi = x;
    prevwi = x;

    for( i = 0; ( header = StrExtract( headers, i ) ) != ""; ++i )
    {
        wi = wi + ( width + 5 ) / ( StrCount( headers, "," ) + 1 );;
        //GfxSelectPen(colorLightYellow,2);
        // GfxSelectSolidBrush(colorbg);
        GfxRoundRect( prevwi, y, wi, y + headheight + 5, 5, 5 );

        if( i != choice )
        {

            GfxRoundRect( prevwi, y, wi, y + headheight + 5, 5, 5 );
            GfxSelectSolidBrush( colorbg );
        }
        else
        {
            wic = wi;
            prevwic = prevwi;
        }

        GfxSelectFont( "Arial", CellHeight / 2.9, 600 );
        GfxDrawText( header, prevwi, y, wi, y + headheight + 5, 1 | 4 | 32 );
        prevwi = wi;
    }

    return choice;
}

///////////////////////////////////////////////////
//Create Table
//Header
///////////////////////////////////////////////////
GfxSelectFont( "Arial", CellHeight / 2 );
GfxSelectSolidBrush( colorGreen );
GfxRoundRect( x1, y1 - 3, x1 + CellWidth * col + 3, y1 + CellHeight * 2 + 3, 15, 15 );
GfxSetTextColor( colorYellow );
GfxSetBkMode( 1 ); //set transparent mode
dt = SelectedValue( DateTime() );

// khai bao vnindex
index_fc = Foreign( "Vnindex", "Close" );
index_rfc = WriteVal( ROC( index_fc, 1 ), 5.2 );
index_chg = index_fc - Ref( index_fc, -1 );
//vni color
colorindex = IIf( index_fc > Ref( index_fc, -1 ), colorbrightGreen, IIf( index_fc == Ref( index_fc, -1 ), colorGold, colorRed ) );
GfxSetTextColor( colorindex[BarCount - 1] );
GfxSelectFont( "Arial", CellHeight / 2, 500 );
GfxDrawText( "VNINDEX " + index_fc + " " + index_rfc + "%" + "\n" + DateTimeToStr( dt[BarCount - 1], 1 ) + " ", x1 + BtnOffsetXY, y1, x1 + CellWidth * 5 + 10, y1 + CellHeight * 2, 1 );

//Tao ON|OFF button
id = GuiGetEvent( 0, 0 );
event = GuiGetEvent( 0, 1 );
MyChartID = GetChartID();
ToggleButton = Nz( StaticVarGet( "ToggleButton" + MyChartID ) );
GuiButtonTrigger( "On", x1 + CellWidth * col - 45, y1 + CellHeight / 2, 40, 30 );
GuiSetColors( IDset, IDset, 2, colorWhite, colorGreen, colorYellow, colorWhite, colorGreen, colorYellow, colorGold, colorDarkTeal, colorYellow );


//Draw Table after click
///////////////////////////////////////////////////
GfxSelectFont( "Arial", CellHeight / 3.2 );

//Ham tao DMDT
function DMDT( TickerList, text, _x0, _y0, CellWidth, CellHeight )
{
    GfxSelectSolidBrush( colorDarkGreen );
    sym_num = StrCount( tickerlist, "|" ) + 1;
    GfxRoundRect( _x0, _y0 + 10, _x0 + CellWidth * col + 5 * 15, _y0 + CellHeight * ( sym_num + 2 ) + 10, 15, 15 );
    GfxLabel( text, _x0, _y0 + 10, CellWidth * col + 5 * 15, CellHeight, 1 );


    for( i = 0; i < sym_num; i++ )
    {
        list = StrExtract( Myasset, i, '|' );

        symbol = StrExtract( list, 0, ',' ) ;
        Giamua = StrExtract( list, 1, ',' ) ;
        Stoploss = StrExtract( list, 2, ',' ) ;
        Target = StrExtract( list, 3, ',' ) ;



        SetForeign( symbol );
        fC = close;
        rfc = ROC( fc, 1 );
        RestorePriceArrays();
        fC1 = LastValue( fC );
        rfc1 = LastValue( rfc );
        PnL = ( fC1 - StrToNum( giamua ) ) / StrToNum( giamua ) * 100;
        //Tinh shares
        shares = round(( 200000 * 0.01 ) / (StrToNum( GiaMua ) - StrToNum( Stoploss )));



        Cutloss = fC1 < StrToNum( Stoploss );
        takeprofit = fC1 > StrToNum( Target );

        if( fC1 < StrToNum( Stoploss ) )
            color = colorRed;
        else
            if( fC1 >= StrToNum( Stoploss ) AND fC1 <= StrToNum( giamua ) )
                color = colorOrange;
            else
                if( fC1 <= StrToNum( Target ) AND  fC1 > StrToNum( giamua ) )
                    color = colorGreen;
                else
                    if( fC1 > StrToNum( Target ) )
                        color = ColorRGB( 249, 4, 249 );

        textname = symbol;
        textgia = WriteIf( fC1 < 10, "0" + WriteVal( fC1, 1.2 ), WriteVal( fC1, 1.2 ) );
        //mauneno=ColorBlend( colorLavender, colorLavender, 0 );
        GfxSelectFont( "Arial", CellHeight / 3.2, 500 );
        GfxSetTextColor( colorGold );

        GfxDrawText( "Ticker", _x0   , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 6, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "Gia Mua", _x0 + cellWidth * col / 6 , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 3, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "Stoploss", _x0 + cellWidth * col / 3  , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 2, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "Price", _x0 + cellWidth * col / 2 , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 3 * 2, 6 * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( "Target", _x0 + cellWidth * col / 3 * 2  , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 6 * 5, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "R - R %", _x0 + cellWidth * col / 6 * 5 , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col, 3 * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( "Shares", _x0 + cellWidth * col / 2.5 * 5 , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 5, 3 * cellHeight + _y0 + 5 , 1 );

        GfxSelectSolidBrush( color );
        GfxRoundRect( _x0, _y0 + ( i + 2 ) * cellHeight + 3, _x0 + cellWidth * col / 6 * 7, ( i + 3 ) * cellHeight + _y0 + 4, 15, 15 );

        if( px > _x0 AND px < _x0 + cellWidth * col / 6 * 7 AND py > _y0 + ( i + 2 ) * cellHeight + 3 AND py < ( i + 3 ) * cellHeight + _y0 + 3 AND Click )
        {
            AB = CreateObject( "Broker.Application" );
            doc = AB.ActiveDocument;
            doc.Name = symbol;
        }

        GfxSetTextColor( colorBlack );
        GfxDrawText( textname, _x0   , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 6, ( i + 3 ) * cellHeight + _y0 + 5, 1 );
        GfxDrawText( giamua, _x0 + cellWidth * col / 6 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 3, ( i + 3 ) * cellHeight + _y0 + 5, 1 );
        GfxDrawText( stoploss, _x0 + cellWidth * col / 3  , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 2, ( i + 3 ) * cellHeight + _y0 + 5, 1 );

        GfxDrawText( textgia, _x0 + cellWidth * col / 2 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 3 * 2, ( i + 3 ) * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( target, _x0 + cellWidth * col / 3 * 2  , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 6 * 5, ( i + 3 ) * cellHeight + _y0 + 5, 1 );

        GfxDrawText( StrFormat( "%s  %.1f%%", "  ", Pnl ), _x0 + cellWidth * col / 6 * 5 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col, ( i + 3 ) * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( NumToStr( shares ), _x0 + cellWidth * col / 2.5 * 5 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 5, ( i + 3 ) * cellHeight + _y0 + 5 , 1 );


    }
}

//Ham tao DMTD
function DMTD( TickerList, text, _x0, _y0, CellWidth, CellHeight )
{
    GfxSelectSolidBrush( colorDarkGreen );
    sym_num = StrCount( tickerlist, "|" ) + 1;
    GfxRoundRect( _x0, _y0 + 10, _x0 + CellWidth * col + 5, _y0 + CellHeight * ( sym_num + 2 ) + 10, 15, 15 );
    GfxLabel( text, _x0, _y0 + 10, CellWidth * col, CellHeight, 1 );

    for( i = 0; i < wl_count; i++ )
    {
        list = StrExtract( MyWL, i, '|' );

        symbol = StrExtract( list, 0, ',' ) ;
        pivot = StrExtract( list, 1, ',' ) ;

        SetForeign( symbol );
        fC = close;
        rfc = ROC( fc, 1 );
        GTGD = V * C;
        DBKL = V / MA( V, 50 ) * 100 ;
        RestorePriceArrays();


        RestorePriceArrays();
        fC1 = LastValue( fC );
        rfc1 = LastValue( rfc );

        breakout = fC1 > StrToNum( pivot );

        if( breakout )
            color = colorGreen;
        else color = colorGold;

        textname = symbol;
        textgia = WriteIf( fC1 < 10, "0" + WriteVal( fC1, 1.2 ), WriteVal( fC1, 1.2 ) );
        //mauneno=ColorBlend( colorLavender, colorLavender, 0 );
        GfxSelectFont( "Arial", CellHeight / 3.2, 500 );
        GfxSetTextColor( colorGold );
        //Ticker    Gia      %       GTGD         %DBKL   Pivot",_x0 +8 , _y0 + cellHeight+5, _x0+cellWidth*col, _y0+2*cellHeight+5, 0)//

        GfxDrawText( "Ticker", _x0   , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 6, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "Gia", _x0 + cellWidth * col / 6 - 30 , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 3, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "    %", _x0 + cellWidth * col / 6  , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 2, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "GTGD", _x0 + cellWidth * col / 2 - 30, _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 3 * 2, 6 * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( "        % DBKL", _x0 + cellWidth * col / 3 * 2 - 20  , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col / 6 * 5, 3 * cellHeight + _y0 + 5, 1 );
        GfxDrawText( "Pivot", _x0 + cellWidth * col / 6 * 5 , _y0 + 1 * cellHeight +  5, _x0 + cellWidth * col - 10, 3 * cellHeight + _y0 + 5 , 2 );

        GfxSelectSolidBrush( color );
        GfxRoundRect( _x0, _y0 + ( i + 2 ) * cellHeight + 3, _x0 + cellWidth * col, ( i + 3 ) * cellHeight + _y0 + 3, 15, 15 );

        if( px > _x0 AND px < _x0 + cellWidth * col AND py > _y0 + ( i + 2 ) * cellHeight + 3 AND py < ( i + 3 ) * cellHeight + _y0 + 3 AND Click )
        {
            AB = CreateObject( "Broker.Application" );
            doc = AB.ActiveDocument;
            doc.Name = symbol;
        }

        GfxSetTextColor( colorBlack );
        GfxDrawText( textname, _x0   , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 6, ( i + 3 ) * cellHeight + _y0 + 5, 1 );
        GfxDrawText( textgia, _x0 + cellWidth * col / 6 - 30 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 3, ( i + 3 ) * cellHeight + _y0 + 5, 1 );
        GfxDrawText( StrFormat( "%s  %.1f%%", "    ", rfc1 ), _x0 + cellWidth * col / 6 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 2, ( i + 3 ) * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( numtostr( GTGD, 4.0 ), _x0 + cellWidth * col / 2 - 30  , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 3 * 2 + 10, ( i + 3 ) * cellHeight + _y0 + 5, 1 );

        GfxDrawText( StrFormat( "%s  %.1f%%", "    ", DBKL ), _x0 + cellWidth * col / 3 * 2 - 20 , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col / 6 * 5 + 20    , ( i + 3 ) * cellHeight + _y0 + 5 , 1 );
        GfxDrawText( pivot, _x0 + cellWidth * col / 6 * 5  , _y0 + ( i + 2 ) * cellHeight +  5, _x0 + cellWidth * col - 10, ( i + 3 ) * cellHeight + _y0 + 5, 2 );

    }
}

procedure GfxHT( x, y )
{
    SetOrigin( x1, y1 + CellHeight * 3 );
    G = GfxHTabs( "HTab1", "DANH MUC", 30, _x0, _y0 - CellHeight + 4, CellWidth * col, CellHeight, colorWhite, colorGrey40 );


    DMDT( Myasset, " DANH MUC DAU TU", _x0, _y0, CellWidth, CellHeight );
    DMTD( MyWL, "DANH MUC THEO DOI", _x0, _y0 + CellHeight * asset_count + 2 * CellHeight, CellWidth, CellHeight );
}

//Event Control button quen click
if( id == IDset AND event == 1 )  // If ToggleButton is clicked
{
    if( ToggleButton ) StaticVarSet( "ToggleButton" + MyChartID, ToggleButton = 0, 0 );
    else  StaticVarSet( "ToggleButton" + MyChartID, ToggleButton = 1, 0 );
}

if( ToggleButton )
{

    GuiSetText( "On", IDset );
    GfxHT( x1, y1 + CellHeight * 3 );
}

else
{
    GuiSetText( "Off", IDset );
    GuiSetColors( IDset, IDset, 1, colorWhite, colorRed, colorYellow, colorWhite, colorGreen, colorYellow, colorGold, colorDarkTeal, colorYellow );
}





///////////////////////////////////////////////////
//1. Ve Chart Chinh
_SECTION_BEGIN( "Price Chart" );
GraphLabelDecimals = 2;
SetChartOptions( 0, chartShowArrows | chartShowDates );

_N(Title = " "+EncodeColor(colorBlue)+ Name() + " - "+EncodeColor(colorBlue)+FullName()+ " - "+ EncodeColor(colorViolet)+IndustryID(1) +" - "+ MarketID(1) + EncodeColor(colorGreen)+ " - C:  "+WriteVal(C,1.2)+"  "+ " ("+ WriteVal( ROC( C, 1),1.1)+"%) "+ EncodeColor(colorGrey40)+  "  , V:  " + EncodeColor(colorDarkGreen)+WriteVal(V,1.0));

//Type Chart
TypeofPrice = ParamList( "Type of Price", "Candle Stick,Bar Chart", 0 );

switch( TypeofPrice )
{
case "Candle Stick":
    upcolor = ParamColor( "Up color", colorWhite );
    downcolor = ParamColor( "Down color", colorBlack );
    barcolor = ParamColor( "Bar color", colorBlack );
    SetBarFillColor( IIf( C > O, upcolor, downcolor ) );
    PlotOHLC( Open, High, Low, Close, " ", barcolor, styleCandle + styleNoTitle, minv, hhvv * 9 );
    GraphXSpace = 15;
    break;

case "Bar Chart":
    BarColor = IIf( C > Ref( C, -1 ), ColorRGB( 46, 82, 173 ), ColorRGB( 238, 82, 160 ) );
    PlotOHLC( Close,  High,  Low,  Close, "", BarColor, styleBar + styleThick, minv, hhvv * 9, 0, 0, 2 );

    break;


}

_SECTION_END();

///////////////////////////////////////////////////
// 2. Them EMA vao do thi
_SECTION_BEGIN( "EMA" );

ema1 = Param( "Chu Ky", 21, 1, 200, 1 );
Plot( EMA( C, ema1 ), "EMA" + ema1, colorRed, styleThick );

_SECTION_END();

//////////////////////////////////////////////////

_SECTION_BEGIN( "Volume" );
//Khong phan biet hoa thuong
//Them volume vao do thi
Vdn = IIf( C < Ref( C, -1 ), V, 0 );
Vup = IIf( C > Ref( C, -1 ), V, 0 );
hvup10 = HHV( vup, 10 );
hv10 = HHV( vdn, 10 );
VAV = MA( V, Param( "TB Vol", 30, 1, 200, 1 ) );

TypeofVol = ParamList( "Type of Volume", "Pivot Pocket, Standard", 0 );

switch( TypeofVol )
{



case "Pivot Pocket":
    color = IIf( C > Ref( C, -1 ) AND V < hv10, ParamColor( "Volume up", colorGreen ),
                 IIf( C > Ref( C, -1 ) AND V > hv10, ParamColor( "Pivot Pocket", colorBrightGreen ),
                      IIf( C < Ref( C, -1 ) AND V > hvup10, ParamColor( "Max Volumn down", ColorRGB( 0, 253, 251 ) ), ParamColor( "Volume down", colorred ) ) ) );

    break;

case "Standard":
    color = IIf( C >= Ref( C, -1 ), ParamColor( "Volume up", colorGreen ), ParamColor( "Volume down", colorred ) );


    break;

}

//Plot Volume and Caculator Vol 30

SetBarFillColor( color );
Plot( V, _DEFAULT_NAME(), ParamColor( "color Volume", colorWhite ), styleArea | styleOwnScale | styleNoLabel, minv, hhvv * 9 );
CHANGE = ( ( C - Ref( C, -1 ) ) / Ref( C, -1 ) ) * 100;
Plot( VAV, "Vol TB 30 Day", colorBlue, styleLine | styleOwnScale | styleNoLabel, minv, hhvv * 7, 0, 10 );

_SECTION_END();

//
//Chart in Chart
_SECTION_BEGIN("Chart in chart");
pxwidth = Status( "pxwidth" );
pxheight = Status( "pxheight" );
pxb = Status( "pxchartbottom" );
maunenboad=ParamColor("colorkhung", colorLightYellow);
GfxSelectSolidBrush( maunenboad );

function GetMonth( MonthNumber ) 
{ 
         switch (MonthNumber) { 
            case 2 :  
              result = "Feb"; 
               break ; 
            case 3 : 
              result = "Mar"; 
              break ; 
            case 4 : 
              result = "Apr"; 
            break ; 
          case 5 : 
            result = "May"; 
            break ; 
          case 6 : 
            result = "Jun"; 
            break ; 
          case 7 : 
            result = "Jul"; 
            break ; 
          case 8 : 
            result = "Aug"; 
            break ; 
          case 9 : 
            result = "Sep"; 
            break ; 
          case 10 : 
            result = "Oct"; 
            break ; 
          case 11 : 
            result = "Nov"; 
            break ; 
          case 12 : 
            result = "Dec"; 
      break ; 
   } 

   return result; 
} 


GfxSetBkMode(0); // transparent
lDays =Param ( "MA200", 200 , 50 , 250 , 1 ) ;
sDays =Param ( "MA50", 50 , 5 , 100 , 1 ) ;
tDays= Param ( "MA21", 21 , 5 , 100 , 1 ) ;
vDays =Param ( "Volume MA", 20 , 5 , 100 , 1 ) ;
ChartMargin = 20 ;
DateMargin = 10 ;
DataMargin = 20 ;
ScreenHeight = Status ( "pxheight" );
SceernWidth = Status ( "pxwidth" );
Bars =Param ( "Number Of Bars", 49 , 20 , 200 , 1 ) ;
LastBar =  BarCount ;
FirstBar =  LastBar - Bars;
SymbolNum = 1;


cellheight = 29/870*pxheight;

GfxSelectSolidBrush( maunenboad );
letrai1=Param ( "Le trai", 600 , 0 , 2000 , 1 ) ;
lephai1=Param ( "Le phai", 800 , 0 , 2000 , 1 ) ;
letren1=Param ( "Le tren", 25 , 0 , 2000 , 1 ) ;
leduoi1=Param ( "Le duoi", 600 , 0 , 2000 , 1 ) ;
Letrai=letrai1/1880*pxwidth;
letren=letren1/870*pxheight;
lephai=lephai1/1880*pxwidth;
leduoi=leduoi1/870*pxheight;
letrenw=letren+430/870*pxheight;
leduoiw=leduoi-410/870*pxheight;
ChartHeight = (ScreenHeight-letren)-leduoi   ;
Width = (SceernWidth-letrai)-lephai ;
BarChartHeight=  (0.75 ) * ChartHeight - DataMargin;
VolChartHeight = ChartHeight - BarChartHeight - DataMargin*2 ;
NumberPriceLevels = BarChartHeight /20 ;
BarChartWidth=  Width - 45 ;
BarWidth = (BarChartWidth - ChartMargin*1.5 ) / Bars  ;

for ( x = 0 ; x < 1 ; x++ ) 
{ 
         for ( i = 0 ; i < 1 ; i++ ) 
        { 
                 notDone = True;
                 sym = Name();
                  if (sym != "" )
                 {
                 x1 = Width * i +5+letrai ; 
                 y1 = ChartHeight * x + 5+letren ;
                 x2 = Width * (i + 1 )+letrai;
                 y2 = ChartHeight * (x + 1 )-DateMargin+letren;
                  GfxSelectPen ( colorBlack ); 
                  GfxRectangle ( x1, y1, x2, y2 );
                 SymbolNum++;
                  SetForeign (sym);
/////////////////////
Timeframe  = ParamList("Time frame","Hourly,Weekly,Monthly",3);

switch(Timeframe)
{

	case "Hourly":
	TimeFrameSet(inHourly);
	break;
	case "Weekly":
	TimeFrameSet(inWeekly);
	break;
	case "Monthly":
	TimeFrameSet(inMonthly);
	break;
}	
op =O; 
hi =H;
lo = L; 
clo = C; 
vold = V;

//////////////////////////////////
                 EMAShort= EMA (clo,sDays);
                 EMAT= EMA (clo,tDays);
                 EMALong= EMA (clo,lDays);
                 EMAVol= MA (vold,vDays);
				vol20=Foreign(sym,"Volume");				
				mavol20=LastValue( MA(vold,20));
                 D = Day ();
                 M = Month ();
                 Y = Year ();
				 priceHigh = 0 ;
                 VolHigh = 0 ;
                 priceMin = 1000000 ;
                  for ( z = FirstBar; z < LastBar ; z++ ) 
                 { 
                          Vol = vold[z];
                          BarH = hi[z];
                          BarL = lo[z];                         
                           if ( Vol > VolHigh ) 
                          { 
                                   VolHigh = Vol;
                          }
                           if ( BarH > priceHigh ) 
                          { 
                                   priceHigh = BarH;
                          }
                           if ( BarL < priceMin ) 
                          { 
                                   priceMin = BarL;
                          }
                 }
                 LOpen = op[LastBar- 1];
                 LHigh = hi[LastBar- 1];
                 LLow = lo[LastBar- 1];
                 LClose = clo[LastBar- 1];
                 LClose2 = clo[LastBar- 2];
                 LVol = vold[LastBar- 1];
                 chg=(LClose-LClose2)*100/LClose2;
				GfxSelectFont ( "Arial" , 11,600 ); 
				GfxTextOut (Timeframe, x1+50/1880*pxwidth , y1+30); 
                GfxSelectFont ( "Arial" , 8 ); 
                GfxSetTextColor (colorBlack); 
                GfxTextOut ("O: " +LOpen + "   H: " +LHigh + "   L: " +LLow + "   C: " +LClose + "   Vol: " +LVol/ 1000000 + " M", x1+30/1880*pxwidth , y1+2 ); 			
                 VolRatio = VolChartHeight /  VolHigh ;
                 Range = priceHigh - priceMin;
                 Ratio = BarChartHeight / Range ;
                 PriceLineLevel = Range / NumberPriceLevels;
                 yHi=(((priceHigh - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                  GfxTextOut ( WriteVal (priceHigh,1.2 ),   x1 + BarChartWidth, yHi -8 );
                  GfxSelectPen ( colorLightGrey ); 
                  GfxMoveTo ( x1 , yHi ); 
                  GfxLineTo ( x1 + BarChartWidth -5 , yHi );
                  for ( z = 0 ; z < NumberPriceLevels- 1   ; z++ ) 
                 { 
                          PriceLevel = PriceLineLevel*z + priceMin;

                          yHi=(((PriceLevel - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                           GfxTextOut ( WriteVal (PriceLevel, 1.2 ),   x1 + BarChartWidth, yHi -8 );
                           GfxSelectPen ( colorLightGrey ); 
                           GfxMoveTo ( x1 , yHi );
                           GfxLineTo ( x1 + BarChartWidth -5 , yHi );
                 }

                 HighestLast = 0 ;
                 w = 0 ;
                 sEMAlast = EMAShort[FirstBar];
                 tEMAlast = EMAT[FirstBar];
                 lEMAlast = EMALong[FirstBar];
                 vEMAlast = EMAVol[FirstBar];
                 clast	  = clo[FirstBar];////////////////////////////////////////////////////////////////
                  for ( z = FirstBar; z < LastBar ; z++ ) 
                 {
                          BarH = hi[z];
                          BarL = lo[z];
                          BarO = op[z];
                          BarC = clo[z];
                          Vol = vold[z];
                          sEMA = EMAShort[z];
                          ttEMA = EMAT[z];
                          lEMA = EMALong[z];
                          vEMA = EMAVol[z];
                          BarDay = D[z];
                          BarMonth = M[z];
                          BarYear = Y[z];
                          yO = (((BarO - priceMin )* Ratio)- BarChartHeight ) * -1 + y1 + DataMargin;
                          yC = (((BarC - priceMin )* Ratio)- BarChartHeight ) * -1 + y1 + DataMargin;
                          yHi = (((BarH - priceMin )* Ratio)- BarChartHeight ) * -1 + y1 + DataMargin;
                          yLo = (((BarL - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin ;
                          ysEMAlast = (((sEMAlast - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                          ysEMA = (((sEMA - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                           ytEMAlast = (((tEMAlast - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                          ytEMA = (((ttEMA - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;                       
                          ylEMAlast = (((lEMAlast - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                          ylEMA = (((lEMA - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                          vHi = y2 - (Vol * VolRatio)  ;
                          yvEMAlast = y2 - (vEMAlast  * VolRatio) ;
                          yvEMA = y2 - (vEMA * VolRatio)  ;
                          ///////////
                          yClast = (((clast - priceMin )* Ratio) - BarChartHeight) * -1 + y1 + DataMargin;
                          ////////////////
                           
                          
                           if ( BarO > BarC)
                          {
                                    GfxSelectSolidBrush ( colorRed ); 
                                    GfxSelectPen ( colorRed ,2);
                          }
                           else
                          { 
                                    GfxSelectSolidBrush ( colorGreen );
                                    GfxSelectPen ( colorGreen ,2);
                          }                         
                                          
						// Plot bar in minichart
								
							//Bar dang candle
                           //GfxMoveTo ( BarWidth * w + x1 + ChartMargin , yHi );
                           //GfxLineTo ( BarWidth * w + x1 + ChartMargin, yLo );
                           //GfxMoveTo ( BarWidth * w + x1 + ChartMargin -4   , yo );
                           //GfxLineTo ( BarWidth * w + x1 + ChartMargin +4, yo );
                           //GfxMoveTo ( BarWidth * w + x1 + ChartMargin +4   , yC );
                           //GfxLineTo ( BarWidth * w + x1 + ChartMargin -4, yC );
                           ////Ve hinh chu nhat thanh nen
                           //GfxRectangle( BarWidth * w + x1 + ChartMargin -5   , yo,BarWidth * w + x1 + ChartMargin +5 , yC);	
                           
                           //Bar chart
                           GfxMoveTo ( BarWidth * w + x1 + ChartMargin , yHi );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin, yLo );
                           //Ve thanh ngang Open
                           //GfxMoveTo ( BarWidth * w + x1 + ChartMargin -4   , yo );
                           //GfxLineTo ( BarWidth * w + x1 + ChartMargin +4, yo );
                           //Ve thanh nganh Close tuan
                           GfxMoveTo ( BarWidth * w + x1 + ChartMargin +4   , yC );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin -4, yC );
                          // Plot Volume
                           if ( BarO > BarC)
                          {
                                    GfxSelectPen ( colorRed ,2); 
                          }
                           else
                          { 
                                    GfxSelectPen ( colorGreen ,2);
                          }
								
                           GfxMoveTo ( BarWidth * w + x1 + ChartMargin , vHi-20 );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin, y2-20 );
								// Plot Volume EMAs
                           GfxSelectPen ( colorRed ); 
                           GfxMoveTo ( BarWidth * (w -1 ) + x1  + ChartMargin , ysEMAlast );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin, ysEMA );
                           GfxSelectPen ( colorBlue ); 
                           GfxMoveTo ( BarWidth * (w -1 ) + x1  + ChartMargin , ytEMAlast );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin, ytEMA );
                           GfxSelectPen ( colorViolet ); 
                           GfxMoveTo ( BarWidth * (w -1 ) + x1  + ChartMargin , ylEMAlast );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin, ylEMA );
                           GfxSelectPen ( colorBlack ); 
                           GfxMoveTo ( BarWidth * (w -1 ) + x1  + ChartMargin , yvEMAlast-20 );
                           GfxLineTo ( BarWidth * w + x1 + ChartMargin, yvEMA-20 );                           
                          w++;                          
                          sEMAlast = sEMA ;
                          tEMAlast = ttEMA ;
                          lEMAlast = lEMA ;
                          vEMAlast = vEMA ;
                          clast=BarC;                            
                                  /////////////////////
                           GfxSetTextColor (colorBlue); 
                           GfxSelectFont ( "Arial" , 7 ); 
                           GfxSelectPen ( colorLightGrey ); 
								// Draw vertical month separator and X-axis labels
                           if (BarDay== 1 & notDone )
                          {
                                    if (BarMonth == 1 ) myLabel =WriteVal (BarYear, 1.0 );                                  
                                    else myLabel =GetMonth(BarMonth);
                                    GfxTextOut (myLabel,   BarWidth * w + x1 + ChartMargin - 5 , y2 +DateMargin/3-25 );
                                    GfxMoveTo ( BarWidth * w + x1 + ChartMargin , y2  );
                                    GfxLineTo ( BarWidth * w + x1 + ChartMargin, y1 + DataMargin  );
                                   notDone = False;
                          }

                           if (BarDay== 2 & notDone )
                          {
                                    if (BarMonth == 1 ) myLabel =WriteVal (BarYear, 1.0 );
                                    else myLabel =GetMonth(BarMonth);
                                    GfxTextOut (myLabel,   BarWidth * w + x1 + ChartMargin - 5 , y2 +DateMargin/3-25 );
                                    GfxMoveTo ( BarWidth * w + x1 + ChartMargin , y2  );
                                    GfxLineTo ( BarWidth * w + x1 + ChartMargin, y1 + DataMargin  );
                                   notDone = False;
                          }

                           if (BarDay== 3 & notDone )
                          {
                                    if (BarMonth == 1 ) myLabel =WriteVal (BarYear, 1.0 );
                                    else myLabel =GetMonth(BarMonth);
                                    GfxTextOut (myLabel,   BarWidth * w + x1 + ChartMargin - 5 , y2 +DateMargin/3-25 );
                                    GfxMoveTo ( BarWidth * w + x1 + ChartMargin , y2  );
                                    GfxLineTo ( BarWidth * w + x1 + ChartMargin, y1 + DataMargin  );
                                   notDone = False;
                          }

                           if (BarDay== 4 & notDone )
                          {
                                    if (BarMonth == 1 ) myLabel =WriteVal (BarYear, 1.0 );
                                    else myLabel =GetMonth(BarMonth);
                                    GfxTextOut (myLabel,   BarWidth * w + x1 + ChartMargin - 5 , y2 +DateMargin/3-25 );
                                    GfxMoveTo ( BarWidth * w + x1 + ChartMargin , y2  );
                                    GfxLineTo ( BarWidth * w + x1 + ChartMargin, y1 + DataMargin  );
                                   notDone = True;
                          }

                           if (BarDay== 5 & notDone )
                          {
                                    if (BarMonth == 1 ) myLabel =WriteVal (BarYear, 1.0 );
                                    else myLabel =GetMonth(BarMonth);
                                    GfxTextOut (myLabel,   BarWidth * w + x1 + ChartMargin - 5 , y2 +DateMargin/3-25 );
                                    GfxMoveTo ( BarWidth * w + x1 + ChartMargin , y2 - VolChartHeight );
                                    GfxLineTo ( BarWidth * w + x1 + ChartMargin, y1 + DataMargin );
                                   notDone = True;
                          }
                           if (BarDay== 6 |BarDay== 7 |BarDay== 8 |BarDay== 9 |BarDay== 10 )
                          {
                                   notDone = True;
                          }                                                     
                 }
                  RestorePriceArrays (); 
                 }
                 TimeFrameRestore();
        } 
}

_SECTION_END();